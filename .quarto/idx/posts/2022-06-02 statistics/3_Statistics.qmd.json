{"title":"Statistics","markdown":{"yaml":{"description":"Describing statistical methods","title":"Statistics","categories":["Statistics"],"tags":["R","Statistics","Bayes"],"date":"2022-10-26","toc":true},"headingText":"Logistic Regression","containsRefs":false,"markdown":"\n\n\n\n\n[*Markdown\nTutorial*](https://bookdown.org/yihui/rmarkdown/html-document.html)\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(fig.align='left', echo=TRUE, error=FALSE)\n```\n\n```{r,include=FALSE}\nlibrary(tidyverse)\nlibrary(dplyr)\nlibrary(broom)\nlibrary(moderndive)\nlibrary(knitr)\nlibrary(ggplot2)\n```\n\n```{r data, include=FALSE}\ndf_titanic<- read.csv('https://web.stanford.edu/class/archive/cs/cs109/cs109.1166/stuff/titanic.csv') %>%\n  mutate(Fare_log=round(log(Fare+0.001)))\n```\n\n### Matematyczna interpretacja modelu\n\nQuiz correct answers: d. Hint: `Remember`, the coefficient in a logistic\nregression model is the expected increase in the log odds given a one\nunit increase in the explanatory variable.\n\n```{r echo=FALSE}\ndf_titanic %>% select(Survived,Fare,Fare_log) %>% head() %>% kable()\n```\n\nWyliczanie modelu logistycznego.\n\n```{r}\nmodel <- glm(data=df_titanic, Survived ~ Fare_log, family = 'binomial')\n\ntidy(model)  %>% kable(caption='Table 1. Summary statistics for logistic regression model')\n```\n\n\n\n\n```{r}\ncoef(model)\n\n#Tak przemnozone wspolczynniki interpretujemy nastepujaco:\n#  o ile % wzrosnie odds wystapienia zdarzenia jezeli wzrosnie nam wartosc predyktora o 1\n\nexp(coef(model))\n\n```\n\nPonizej w sposob matematyczny pokazuje ze to wlasnie oznacza\ninterpretacja wzrostu parametra stajacego przy predyktorze.\n\n```{r}\n\ndf_aug <- augment(model, type.predict = \"response\") # without response argument, the fitted value will be on log-odds scale\n\np3 = df_aug$.fitted[df_aug$Fare_log==3][1]\np2 = df_aug$.fitted[df_aug$Fare_log==2][1]\n\nx <- round(p3/(1-p3)/(p2/(1-p2)),5)\n\n# i sprawdzenie czy dobrze rozumiem zaleÅ¼nosc\nx1<-round(exp(coef(model))['Fare_log'],5)\nx1==x\n```\n\nProb for Fare_log = 2 was equal to `r p2` while for Fare_log = 3 was\nequal to `r p3`. The odds increase by `r x`. The same what model results\nsuggests -\\> `r x1`.\n\nQuiz\n\nThe fitted coefficient from the medical school logistic regression model\nis 5.45. The exponential of this is 233.73.\n\nDonald's GPA is 2.9, and thus the model predicts that the probability of\nhim getting into medical school is 3.26%. The odds of Donald getting\ninto medical school are 0.0337, or---phrased in gambling terms---29.6:1.\nIf Donald hacks the school's registrar and changes his GPA to 3.9, then\nwhich of the following statements is FALSE:\n\nPossible Answers\n\na)  His expected odds of getting into medical school improve to 7.8833\n    (or about 9:8).\nb)  His expected probability of getting into medical school improves to\n    88.7%.\nc)  His expected log-odds of getting into medical school improve by\n    5.45.\nd)  His expected probability of getting into medical school improves to\n    7.9%.\n\nCorrect answers on the top of the page\n\n### Graficzna interpretacja modelu\n\n```{r, collapse = TRUE, echo=FALSE, warning=FALSE}\n\n#While the odds scale is more useful than the probability scale for certain things, it isn't entirely satisfying. Statisticians also think about logistic regression models on the log-odds scale, which is formed by taking the natural log of the odds. \n\n#The benefit to this approach is clear: now the logistic regression model can be visualized as a line! Unfortunately, understanding what the log of the odds of an event means is very difficult for humans. \n\ndf_aug <- df_aug %>% mutate(odds=(.fitted/(1-.fitted)), log_odds=log(odds))\n\ndf_aug %>% \n  ggplot()+\n  geom_line(aes(x=Fare_log,y=.fitted), color='green')+\n  geom_line(aes(x=Fare_log,y=odds ), color='red')+\n  geom_line(aes(x=Fare_log,y=log_odds ), color='blue', label='log_odds')\n```\n\n\n\n```{r evaluating model quality}\ndf_aug %>% mutate(Survived_hat=round(.fitted)) %>%\n  select(Survived, Survived_hat) %>% table\n\n#Out of sample predictions\nDiCaprio<-data.frame(Fare_log=1)\naugment(model, newdata = DiCaprio, type.predict = 'response')\n\n```\n\n## Bayesian Statistics - Introduction\n\n### Introduction\n\nThe role of probability distributions in Bayesian data analysis is to\nrepresent uncertainty, and the role of Bayesian inference is to update\nthese probability distributions to reflect what has been learned from\ndata.\n\nLet say I want to set an advertisement on social media. They claim, adds\non their surface has 10% of clicks. I a bit sceptical and asses probable\nefectivnes may range between 0 and 0.20. I assume that binomial model\nwill imitate process generating visitors. Binomial model is my\ngenerative model then.\n\n```{r}\nn_samples <- 100000\nn_ads_shown <- 100\nproportion_clicks <- runif(n_samples, min = 0.0, max = 0.2)\nn_visitors <- rbinom(n = n_samples, size = n_ads_shown, prob = proportion_clicks)\n\npar(mfrow=c(1,2))\n# Visualize proportion clicks\nhist(proportion_clicks)\n# Visualize n_visitors\nhist(n_visitors)\n```\n\nBelow I present joint distribution over both the underlying proportion\nof clicks and how many visitors I would get.\n\n```{r, echo  = FALSE}\nprior <- data.frame(proportion_clicks,n_visitors)\n\n  \np<-prior %>% \n  ggplot(aes(x= n_visitors, y= proportion_clicks))+\n  geom_point()\nlibrary(ggExtra)\nggMarginal(p, type=\"histogram\")\n\n```\n\nI ran my ad campaign, and 13 people clicked and visited your site when\nthe ad was shown a 100 times. I would now like to use this new\ninformation to update the Bayesian model. The reason that we call it\nposterior is because it represents the uncertainty after (that is,\nposterior to) having included the information in the data.\n\n```{r}\n\n# Create the posterior data frame\nposterior <- prior[prior$n_visitors == 13, ]\n\n# Visualize posterior proportion clicks - below I condition the joint distribution - of prior distribution of proportion_clicks and distribution of n_visitors \nhist(posterior$proportion_clicks)\n```\n\nNow we want to use this updated proportion_clicks to predict how many\nvisitors we would get if we reran the ad campaign.\n\n```{r}\n# Assign posterior to a new variable called prior\nprior <- posterior\n\n# Take a look at the first rows in prior\nhead(prior)\n\n# Replace prior$n_visitors with a new sample and visualize the result\nn_samples <-  nrow(prior)\nn_ads_shown <- 100\nprior$n_visitors <- rbinom(n_samples, size = n_ads_shown, prob = prior$proportion_clicks)\nhist(prior$n_visitors)\n```\n\n### Priors\n\n#### Beta distribution\n\nThe Beta distribution is a useful probability distribution when you want\nmodel uncertainty over a parameter bounded between 0 and 1. Here you'll\nexplore how the two parameters of the Beta distribution determine its\nshape.\n\nSo the larger the shape parameters are, the more concentrated the beta\ndistribution becomes.\n\n```{r}\n# Explore using the rbeta function\nbeta_1 <- rbeta(n = 1000000, shape1 = 1, shape2 = 1)\nbeta_2 <- rbeta(n = 1000000, shape1 = 100, shape2 = 100)\nbeta_3 <- rbeta(n = 1000000, shape1 = 100, shape2 = 20)\nbeta_4 <- rbeta(n = 1000000, shape1 = 5, shape2 = 95)\n\n\n\npar(mfrow=c(2,2))\nhist(beta_1, breaks=seq(0,1,0.02), main = \"shape1 = 1, shape2 = 1\")\nhist(beta_2, breaks=seq(0,1,0.02), main = \"shape1 = 100, shape2 = 100\")\nhist(beta_3, breaks=seq(0,1,0.02), main = \"shape1 = 100, shape2 = 20\")\nhist(beta_4, breaks=seq(0,1,0.02), main = \"shape1 = 5, shape2 = 95\")\n```\n\nThe 4th graphs represents the best following setence: *Most ads get\nclicked on 5% of the time, but for some ads it is as low as 2% and for\nothers as high as 8%.*\n\n### Contrasts and comparison\n\nLet say, I initialize also text add campaign, get 6 visitors out of 100\nviews and now I want to compare which one video or text add is more cost\neffective.\n\n```{r}\n# Define parameters\nn_draws <- 100000\nn_ads_shown <- 100\nproportion_clicks <- runif(n_draws, min = 0.0, max = 0.2)\nn_visitors <- rbinom(n = n_draws, size = n_ads_shown, \n                     prob = proportion_clicks)\nprior <- data.frame(proportion_clicks, n_visitors)\n\n# Create the posteriors for video and text ads\nposterior_video <- prior[prior$n_visitors == 13, ]\nposterior_text <- prior[prior$n_visitors == 6, ]\n\n# Visualize the posteriors\nhist(posterior_video$proportion_clicks, xlim = c(0, 0.25))\nhist(posterior_text$proportion_clicks, xlim = c(0, 0.25))\n\n\nposterior <- data.frame(video_prop = posterior_video$proportion_clicks[1:4000],\n                        text_prop = posterior_text$proportion_click[1:4000])\n\n# Calculate the posterior difference: video_prop - text_prop\nposterior$prop_diff <- posterior$video_prop - posterior$text_prop \n\n# Visualize prop_diff\nhist(posterior$prop_diff)\n\n# Calculate the median of prop_diff\nmedian(posterior$prop_diff)\n\n# Calculate the proportion\nmean(posterior$prop_diff > 0.0)\n\n\n#Different adds have differnt costs then:\nvisitor_spend <- 2.53\nvideo_cost <- 0.25\ntext_cost <- 0.05\n\n# Add the column posterior$video_profit\nposterior$video_profit <- posterior$video_prop * visitor_spend - video_cost\n\n# Add the column posterior$text_profit\nposterior$text_profit <- posterior$text_prop * visitor_spend - text_cost\n\n# Visualize the video_profit and text_profit columns\nhist(posterior$video_profit)\nhist(posterior$text_profit)\n\n# Add the column posterior$profit_diff\nposterior$profit_diff <- posterior$video_profit - posterior$text_profit\n\n# Visualize posterior$profit_diff\nhist(posterior$profit_diff)\n\n# Calculate a \"best guess\" for the difference in profits\nmedian(posterior$profit_diff)\n\n# Calculate the probability that text ads are better than video ads\nmean(posterior$profit_diff < 0)\n\n#So it seems that the evidence does not strongly favor neither text nor video ads. But if forced to choose the text ads is better.\n```\n\n#### Changeing Generative model\n\nCompany has changed the way how they price adds. Now they take money\njust for full day of exposition. Binomial model, which approximate\nparticipation of succes in all trials (click in all views) is no longer\nvalid. For new scenario. **Poison distribution** is now needed.\n\n**The Poison distribution takes only one parameter which is the mean\nnumber of events per time unit**\n\nIn R you can simulate from a Poisson distribution using rpois where\nlambda is the average number of occurrences:\n\n```{r}\n# Change the model according to instructions\nn_draws <- 100000\nmean_clicks <- runif(n_draws, min = 0, max = 80) #this is my prior\nn_visitors <- rpois(n = n_draws, mean_clicks)\n\nprior <- data.frame(mean_clicks, n_visitors)\nposterior <- prior[prior$n_visitors == 19, ]\n\nhist(prior$mean_clicks)\nhist(posterior$mean_clicks)\n\n```\n\n### Dealing with 2 parameter model\n\n```{r}\n#  the temperatures of Sweden water in 21 th of June in few following year\ntemp <- c(19,23,20,17,23)\n# Defining the parameter grid - here are are my priors about the posible values of parameters of distribution\npars <- expand.grid(mu = seq(8,30, by = 0.5), \n                    sigma = seq(0.1, 10, by= 0.3))\n# Defining and calculating the prior density for each parameter combination\npars$mu_prior <- dnorm(pars$mu, mean = 18, sd = 5)\npars$sigma_prior <- dunif(pars$sigma, min = 0, max = 10)\npars$prior <- pars$mu_prior * pars$sigma_prior\n# Calculating the likelihood for each parameter combination\nfor(i in 1:nrow(pars)) {\n  likelihoods <- dnorm(temp, pars$mu[i], pars$sigma[i])\n  pars$likelihood[i] <- prod(likelihoods)\n}\n# Calculate the probability of each parameter combination\npars$probability <- pars$likelihood * pars$prior\npars$probability <- pars$probability / sum(pars$probability )\n\nlibrary(lattice)\nlevelplot(probability ~ mu * sigma, data = pars)\n```\n\nWhat's likely the average water temperature for this lake on 20th of\nJulys, and what's the probability the water temperature is going to be\n18 or more on the next 20th?\n\nRight now the posterior probability distribution is represented as a\ndata frame with one row per parameter combination with the corresponding\nprobability.\n\n```{r}\nhead(pars)\n```\n\nBut my questions are much easier to answer if the posterior is\nrepresented as a large number of samples, like in earlier chapters. So,\nlet's draw a sample from this posterior.\n\n```{r}\nsample_indices <- sample(1:nrow(pars), size=10000, replace=TRUE, prob=pars$probability)\npars_sample <- pars[sample_indices,c(\"mu\",\"sigma\")]\nhead(pars_sample)\n\n```\n\nWhat is probabibility of temperature being 18 or above? Not mean\ntemperature, the actual temperature.\n\n```{r}\n#rnorm is vectorized and implicitly loops over mu and sigma\npred_temp<- rnorm(10000, mean=pars_sample$mu, sd=pars_sample$sigma)\n\npar(mfrow=c(1,2))\nhist(pars_sample$mu,30, main = 'probability distribution of mean temperature')\nhist(pred_temp,30, main = 'probability distribution of tempeture' )\nmean(pred_temp>=18)\n```\n\n### Automatisation - BEST package\n\nThe Bayesian model behind BEST assumes that the generative model for the\ndata is a t-distribution; a more flexible distribution than the normal\ndistribution as it assumes that data points might be outliers to some\ndegree. This makes BEST's estimate of the mean difference robust to\noutliers in the data.\n\nThe t-distribution is just like the normal distribution, a generative\nmodel with a mean and a standard deviation that generates heap shaped\ndata. The difference is that the t-distribution has an extra parameter,\nsometimes called the degrees-of-freedom parameter, that governs how\nlikely the t-distribution is to generate outliers far from its center.\n\nAnother way in which BEST is different is that BEST uses a so-called\nMarkov chain Monte Carlo method to fit the model. Markov chain Monte\nCarlo, or MCMC for short, returns a table of samples from the posterior,\nwe can work with the output just like before.\n\n```{r eval=FALSE}\n\n# The IQ of zombies on a regular diet and a brain based diet.\niq_brains <- c(44, 52, 42, 66, 53, 42, 55, 57, 56, 51)\niq_regular <- c(55, 44, 34, 18, 51, 40, 40, 49, 48, 46)\n\n# Calculate the mean difference in IQ between the two groups\nmean(iq_brains) - mean(iq_regular)\n\n# Fit the BEST model to the data from both groups\nlibrary(BEST)\nlibrary(rjags)\nbest_posterior <- BESTmcmc(iq_brains, iq_regular)\n\n# Plot the model result\nplot(best_posterior)\n\n```\n\nAssume that a super smart mutant zombie (IQ = 150) got into the\niq_regular group by mistake. This might mess up the results as you and\nyour colleagues really were interested in how diet affects normal\nzombies.\n\n```{r eval=FALSE}\n# The IQ of zombies given a regular diet and a brain based diet.\niq_brains <- c(44, 52, 42, 66, 53, 42, 55, 57, 56, 51)\niq_regular <- c(55, 44, 34, 18, 51, 40, 40, 49, 48, \n                150) # <- Mutant zombie\n\n# Modify the data above and calculate the difference in means\nmean(iq_brains) - mean(iq_regular)\n```\n\n```{r eval=FALSE}\n# Fit the BEST model to the modified data and plot the result\nlibrary(BEST)\nbest_posterior <- BESTmcmc(iq_brains, iq_regular)\nplot(best_posterior)\n\n```\n\n### Conclusions\n\nBayes allows you to tweak, change and tinker with the model to better\nfit the data analytical problem you have. But a last reason to use Bayes\nis because it is optimal, kind of. It can be shown, theoretically, that\nno other method learns as efficiently from data as Bayesian inference.\n\nIn above examples I show what Bayesian model is about: \\* I describe my\nexpectations of proportion_clicks as uniform distribution (prior) \\*\nThen i describe a generative model which will be responsible for\ngenerating views based on proportion_clicks - the second source of\nvariability. For this aim I use two diffrent distribution - binomial and\npoison - depending on specifity of exercise. \\* I was able to say which\nadd wass better, more, I was able to say which add was better in\nprobability way.\n\n## Bayesian Statistics - Intermediate\n\n### Likelihood\n\nOn the example of poll. Imagine I am taking part in election to local\ngoverment. Based on many historical election poles I can count on 45% of\nvotes. Votes chances are approximate by bheta function.\n\n```{r eval=FALSE}\ndf<-data.frame(sample=seq(0,1,0.01),\n               density=dbeta(x=seq(0,1,0.01),shape1=45,shape2=55))\ndf %>% ggplot(aes(x=sample,y=density))+\n  geom_line()+\n  ggtitle(\"Density function\")\n\n```\n\nLets imagine that i receive 60% of votes in ellection pole. I can assume\nthat binomial distribution is well suited for generative model\nresponsible for how many votes I am geting. Then I may ask myself:\n\\*\\*How probable would be obtaining such a results (60%) of votes under\ndifferent succes_rate (paramter of Binomial distribution).\n\n```{R eval=FALSE}\n\ndf<-data.frame(likelihood=dbinom(x=6,size=10,prob=seq(0,1,0.1)), \n               parameter_p=seq(0,1,0.1))\n\ndf %>% ggplot(aes(x=parameter_p,y=likelihood))+\n  geom_line()+\n  ggtitle(\"Likelihood distribution over different succes_rate parameters\")\n```\n\nThe likelihood function summarizes the likelihood of observing polling\ndata X under different values of the underlying support parameter p.\nThus, the likelihood is a function of p that depends upon the observed\ndata X\n\n### Posterior\n\nSince I've got the prior & likelihood:\n\n-   prior: let say based on the historical pole % of votes I can count\n    on is described by betha distribution Betha(45.55) --\\> most\n    probable is geting 45% votes\n\n-   likelihood: is denoting to the most recent data shown above\n\nI can approach now to modeling **posterior model of p** According to\nBayes rules posterior is calculating by:\n\n*posterior* = prior \\* likelihood\n\nHowever, in more sophisticated model settings, tidy, closed-form\nsolutions to this formula might not exist. Very loosely speaking, the\ngoal here is to send information out to the JAGS program, which will\nthen design an algorithm to sample from the posterior, based on which I\nwill then simulate the posterior.\n\n#### Compiling rjags model\n\nBuilt from previous polls & election data, my prior model of is a\nBeta(,) with shape parameters a=45 and b=55. For added insight into\n**p**, I also polled potential voters. The dependence of X, the number\nof these voters that support you, on **p** is modeled by the\nBin(**n**,**p**) distribution.\n\nIn the completed poll, X=6 of n=10 voters supported you. The next goal\nis to update my model of in light of these observed polling data! To\nthis end, I will use the rjags package to approximate the posterior\nmodel of . This exercise will be break down into the 3 rjags steps:\ndefine, compile, simulate.\n\n```{r eval=FALSE}\nlibrary(rjags)\n\n# DEFINE the model\nvote_model <- \"model{\n    # Likelihood model for X\n    X ~ dbin(p, n)\n    \n    # Prior model for p\n    p ~ dbeta(a, b)\n}\"\n\n# COMPILE the model    \nvote_jags <- jags.model(textConnection(vote_model), \n    data = list(a = 45, b = 55, X = 6, n = 10),\n    inits = list(.RNG.name = \"base::Wichmann-Hill\", .RNG.seed = 100))\n\n# SIMULATE the posterior\nvote_sim <- coda.samples(model = vote_jags, variable.names = c(\"p\"), n.iter = 10000)\n\n# PLOT the posterior\nplot(vote_sim, trace = FALSE)\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"highlight-style":"github","toc":true,"output-file":"3_Statistics.html"},"language":{"code-summary":"Show the code"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","editor":"source","theme":"darkly","title-block-banner":true,"code-copy":true,"code-block-border-left":"#31BAE9","description":"Describing statistical methods","title":"Statistics","categories":["Statistics"],"tags":["R","Statistics","Bayes"],"date":"2022-10-26"},"extensions":{"book":{"multiFile":true}}}}}