{
  "hash": "cc6ff3c457ef529555170dcf287a12f2",
  "result": {
    "markdown": "---\ntitle-block-banner: true\nauthor: Łukasz Rąbalski\ntitle: \"Paralel processing with CPU\"\ndescription: Presentation of how different techniques of parralel processing in Python works\nformat:\n  html:\n    toc: true\n    toc-location: left\n    number-sections: true\n    toc-depth: 3\n    embed-resources: true\ncategories: ['Python','multiprocessing']\ntags: []\neditor: source\nfig.height: 4\nout.width: '100%'\ninclude: TRUE  #prevents code and results from appearing in the finished file. R Markdown still runs the code in the chunk, and the results can be used by other chunks.\necho: TRUE  #echo = FALSE prevents code, but not the results from appearing in the finished file. This is a useful way to embed figures.\nwarning: FALSE\nmessage: FALSE\nerror: FALSE\ndraft: FALSE\n---\n\n\n\n\n\n\nTo check how different parallel processing techniques works I prepared function which looks liked that\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom analiza import map_function\n\nimport inspect\nprint(inspect.getsource(map_function))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndef map_function(args_temp):\n  import pandas as pd\n  from datetime import datetime\n  from time import sleep\n  pd_results_temp=pd.DataFrame(columns=['a','sleep_time','started'])\n  started = datetime.now()\n  arg_a = args_temp[0]\n  arg_sleep_time = args_temp[1]\n  pd_results_temp = pd_results_temp.append({'a':arg_a,'sleep_time':arg_sleep_time,'started':started}, ignore_index=True)\n  sleep(arg_sleep_time)\n  return pd_results_temp\n```\n:::\n:::\n\n\nIn case of multiporcessing functions it's good practice to keep function in saved files in order to import them later.\n\nSee https://bugs.python.org/issue25053. For some reason Pool does not always work with objects not defined in an imported module. So you have to write your function into a different file and import the module.\n\n<!--# https://stackoverflow.com/questions/41385708/multiprocessing-example-giving-attributeerror  -->\n\n# map vs imap\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom analiza import map_function\n\narray_with_args = np.array([1,1], ndmin=2)\narray_with_args = np.append(array_with_args,np.array([2,1], ndmin=2), axis=0)\narray_with_args = np.append(array_with_args,np.array([3,0.5], ndmin=2), axis=0)\narray_with_args = np.append(array_with_args,array_with_args, axis=0)\narray_with_args = np.append(array_with_args,array_with_args, axis=0)\n\n\npd_results=pd.DataFrame(columns=['a','sleep_time','started'])\nprint(array_with_args)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1.  1. ]\n [2.  1. ]\n [3.  0.5]\n [1.  1. ]\n [2.  1. ]\n [3.  0.5]\n [1.  1. ]\n [2.  1. ]\n [3.  0.5]\n [1.  1. ]\n [2.  1. ]\n [3.  0.5]]\n```\n:::\n\n```{.python .cell-code}\nif __name__ == '__main__':\n    with Pool(processes=2) as pool:\n        # call the same function with different data in parallel\n        for result in pool.imap(map_function, array_with_args):\n            print(1)\n            # report the value to show progress\n            pd_results = pd_results.append(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n```\n:::\n\n```{.python .cell-code}\nprint(pd_results.sort_values('started', ascending=True))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     a  sleep_time                    started\n0  1.0         1.0 2023-04-12 16:13:41.263101\n0  2.0         1.0 2023-04-12 16:13:41.263192\n0  3.0         0.5 2023-04-12 16:13:42.268062\n0  1.0         1.0 2023-04-12 16:13:42.271946\n0  2.0         1.0 2023-04-12 16:13:42.777710\n0  3.0         0.5 2023-04-12 16:13:43.279977\n0  1.0         1.0 2023-04-12 16:13:43.786203\n0  2.0         1.0 2023-04-12 16:13:43.789216\n0  3.0         0.5 2023-04-12 16:13:44.795354\n0  1.0         1.0 2023-04-12 16:13:44.796345\n0  2.0         1.0 2023-04-12 16:13:45.304032\n0  3.0         0.5 2023-04-12 16:13:45.809290\n```\n:::\n\n```{.python .cell-code}\narray_with_args\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[1. , 1. ],\n       [2. , 1. ],\n       [3. , 0.5],\n       [1. , 1. ],\n       [2. , 1. ],\n       [3. , 0.5],\n       [1. , 1. ],\n       [2. , 1. ],\n       [3. , 0.5],\n       [1. , 1. ],\n       [2. , 1. ],\n       [3. , 0.5]])\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\narray_with_args.shape\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(12, 2)\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}