plot1+plot2+plot3
class(plot1)
plot1 <- unlist(f_decyl_per_kanal(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje')[1])
plot1
plot1
plot2 <- unlist(f_decyl_per_kanal(leady_nazwa='leady_telefony',decile_nazwa='decile_c2_telefony', c2_nazwa='c2_telefony')[1])
plot1 + plot2
plot2
plot1
plot1 + plot2
plot2
plot1 + class(plot2)
class(plot2)
plot2
knitPrintListPlots(plot1)
install.packages("clinUtils")
library(("clinUtils"))
library("clinUtils")
knitPrintListPlots(plot1)
plot1 <- f_decyl_per_kanal(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje')[1]
knitPrintListPlots(plot1)
walk(list(plot1=plot1), print)
purrr:walk(list(plot1=plot1), print)
purrr::walk(list(plot1=plot1), print)
plot1[[1]]
plot1 <- f_decyl_per_kanal(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje')
plot1
class(plot1[[1]])
plot1[[1]]
plot1 + plot2
subplot(plot1,plot2,plot3,nrows = 3, margin = 0.1, titleY  = TRUE)
plot1 <- f_decyl_per_kanal(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje')[[1]]
plot2 <- f_decyl_per_kanal(leady_nazwa='leady_telefony',decile_nazwa='decile_c2_telefony', c2_nazwa='c2_telefony')[[1]]
plot3<- f_decyl_per_kanal(leady_nazwa='leady_zapytania',decile_nazwa='decile_c2_zapytania', c2_nazwa='c2_zapytania')[[1]]
subplot(plot1,plot2,plot3,nrows = 3, margin = 0.1, titleY  = TRUE)
f_decyl_per_kanal <- function(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje'){
wymagana_liczba_leadow<-ifelse(leady_nazwa=='leady_zapytania',20,40)
wymagana_liczba_miesiecy<-ifelse(leady_nazwa=='leady_zapytania',2,5)
x <<- df_konsultant %>% filter(n_month>wymagana_liczba_miesiecy & as.character(seniority) >='1.0_2.0') %>%
mutate(decile_c2_rezerwacje=ntile(c2_rezerwacje,5),
decile_c2_telefony=ntile(c2_telefony,5),
decile_c2_zapytania=ntile(c2_zapytania,5)) %>%
select(nazwisko_imie,matches('^c2_|decile'))
x1<- df_time %>%
inner_join(x %>%rename('decile'=decile_nazwa) %>%  select(-matches('^c2_')) %>% filter(decile %in% c(1,5)),by = c("nazwisko_imie")) %>%
rename('leady'=leady_nazwa,'c2'=c2_nazwa)%>%
filter(leady>wymagana_liczba_leadow)  %>%
mutate(month=as_date(month),decile=as.character(decile))
x2<- tidyr::crossing(month=unique(x1$month),nazwisko_imie=unique(x1$nazwisko_imie)) %>% left_join(x1) %>% group_by(nazwisko_imie)
x3<-x1 %>% group_by(decile) %>% summarise(c2_total=weighted.mean(c2,leady, na.rm=TRUE),
n_leadow=sum(leady),
seniority_continous=mean(seniority_continous)) %>% mutate(type=decile_nazwa)
plot<-x2%>%
plot_ly( x=~month,
y=~ c2,
color =~decile,
hoverinfo = "text",
text = ~paste("konsultant: ",nazwisko_imie,'\n',
"miesiac: ",month,'\n'),
type="scatter", mode="lines+markers") %>%
layout(yaxis=decile_nazwa)
newlist <- list(plot,x3)
}
plot1 <- f_decyl_per_kanal(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje')[[1]]
plot2 <- f_decyl_per_kanal(leady_nazwa='leady_telefony',decile_nazwa='decile_c2_telefony', c2_nazwa='c2_telefony')[[1]]
plot3<- f_decyl_per_kanal(leady_nazwa='leady_zapytania',decile_nazwa='decile_c2_zapytania', c2_nazwa='c2_zapytania')[[1]]
subplot(plot1,plot2,plot3,nrows = 3, margin = 0.1, titleY  = TRUE)
decile_nazwa
f_decyl_per_kanal <- function(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje'){
wymagana_liczba_leadow<-ifelse(leady_nazwa=='leady_zapytania',20,40)
wymagana_liczba_miesiecy<-ifelse(leady_nazwa=='leady_zapytania',2,5)
x <<- df_konsultant %>% filter(n_month>wymagana_liczba_miesiecy & as.character(seniority) >='1.0_2.0') %>%
mutate(decile_c2_rezerwacje=ntile(c2_rezerwacje,5),
decile_c2_telefony=ntile(c2_telefony,5),
decile_c2_zapytania=ntile(c2_zapytania,5)) %>%
select(nazwisko_imie,matches('^c2_|decile'))
x1<- df_time %>%
inner_join(x %>%rename('decile'=decile_nazwa) %>%  select(-matches('^c2_')) %>% filter(decile %in% c(1,5)),by = c("nazwisko_imie")) %>%
rename('leady'=leady_nazwa,'c2'=c2_nazwa)%>%
filter(leady>wymagana_liczba_leadow)  %>%
mutate(month=as_date(month),decile=as.character(decile))
x2<- tidyr::crossing(month=unique(x1$month),nazwisko_imie=unique(x1$nazwisko_imie)) %>% left_join(x1) %>% group_by(nazwisko_imie)
x3<-x1 %>% group_by(decile) %>% summarise(c2_total=weighted.mean(c2,leady, na.rm=TRUE),
n_leadow=sum(leady),
seniority_continous=mean(seniority_continous)) %>% mutate(type=decile_nazwa)
plot<-x2%>%
plot_ly( x=~month,
y=~ c2,
color =~decile,
hoverinfo = "text",
text = ~paste("konsultant: ",nazwisko_imie,'\n',
"miesiac: ",month,'\n'),
type="scatter", mode="lines+markers") %>%
layout(yaxis=list(decile_nazwa))
newlist <- list(plot,x3)
}
f_decyl_per_kanal <- function(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje'){
wymagana_liczba_leadow<-ifelse(leady_nazwa=='leady_zapytania',20,40)
wymagana_liczba_miesiecy<-ifelse(leady_nazwa=='leady_zapytania',2,5)
x <<- df_konsultant %>% filter(n_month>wymagana_liczba_miesiecy & as.character(seniority) >='1.0_2.0') %>%
mutate(decile_c2_rezerwacje=ntile(c2_rezerwacje,5),
decile_c2_telefony=ntile(c2_telefony,5),
decile_c2_zapytania=ntile(c2_zapytania,5)) %>%
select(nazwisko_imie,matches('^c2_|decile'))
x1<- df_time %>%
inner_join(x %>%rename('decile'=decile_nazwa) %>%  select(-matches('^c2_')) %>% filter(decile %in% c(1,5)),by = c("nazwisko_imie")) %>%
rename('leady'=leady_nazwa,'c2'=c2_nazwa)%>%
filter(leady>wymagana_liczba_leadow)  %>%
mutate(month=as_date(month),decile=as.character(decile))
x2<- tidyr::crossing(month=unique(x1$month),nazwisko_imie=unique(x1$nazwisko_imie)) %>% left_join(x1) %>% group_by(nazwisko_imie)
x3<-x1 %>% group_by(decile) %>% summarise(c2_total=weighted.mean(c2,leady, na.rm=TRUE),
n_leadow=sum(leady),
seniority_continous=mean(seniority_continous)) %>% mutate(type=decile_nazwa)
plot<-x2%>%
plot_ly( x=~month,
y=~ c2,
color =~decile,
hoverinfo = "text",
text = ~paste("konsultant: ",nazwisko_imie,'\n',
"miesiac: ",month,'\n'),
type="scatter", mode="lines+markers") %>%
layout(yaxis=list(title =decile_nazwa))
newlist <- list(plot,x3)
}
plot1 <- f_decyl_per_kanal(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje')[[1]]
plot2 <- f_decyl_per_kanal(leady_nazwa='leady_telefony',decile_nazwa='decile_c2_telefony', c2_nazwa='c2_telefony')[[1]]
plot3<- f_decyl_per_kanal(leady_nazwa='leady_zapytania',decile_nazwa='decile_c2_zapytania', c2_nazwa='c2_zapytania')[[1]]
subplot(plot1,plot2,plot3,nrows = 3, margin = 0.1, titleY  = TRUE)
subplot(plot1,plot2,plot3,nrows = 3, margin = 0.1, titleY  = TRUE,showlegend=F)
library(patchwork)
plot1 <- f_decyl_per_kanal(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje')[[1]]
plot2 <- f_decyl_per_kanal(leady_nazwa='leady_telefony',decile_nazwa='decile_c2_telefony', c2_nazwa='c2_telefony')[[1]]
plot3<- f_decyl_per_kanal(leady_nazwa='leady_zapytania',decile_nazwa='decile_c2_zapytania', c2_nazwa='c2_zapytania')[[1]]
subplot(plot1,plot2,plot3,nrows = 3, margin = 0.1, titleY  = TRUE,showlegend=F)
start<-as_date('2022-01-01')
end<-as_date('2022-10-01')
#DF_surowe
df_surowe<- zapytanie_do_bazy('select * from analizy.pub.lukrab_dekompozycja_konsultanta_long where seniority_continous is not null')  %>%
mutate(month=as_date(month)) %>% filter(month>= start & month<=end)
Encoding(df_surowe$nazwisko_imie) <- 'UTF-8'
#DF_time
df_time<-  df_surowe %>% transformacja_tabeli()  %>% mutate(c2_zapytania=sold_zapytania/leady_zapytania)
#DF_konsultant
df_konsultant<- df_time %>%
f_reduction(.,vector_group = c("user_id","nazwisko_imie","stanowisko","grupa_sprzedazowa","seniority")) %>%
transformacja_tabeli() %>% mutate(c2_zapytania=sold_zapytania/leady_zapytania)
leady_nazwa='leady_rezerwacje'
decile_nazwa='decile_c2_rezerwacje'
c2_nazwa='c2_rezerwacje'
leady_nazwa='leady_zapytania'
decile_nazwa='decile_c2_zapytania'
c2_nazwa='c2_zapytania'
f_decyl_per_kanal <- function(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje'){
wymagana_liczba_leadow<-ifelse(leady_nazwa=='leady_zapytania',20,40)
wymagana_liczba_miesiecy<-ifelse(leady_nazwa=='leady_zapytania',2,5)
x <<- df_konsultant %>% filter(n_month>wymagana_liczba_miesiecy & as.character(seniority) >='1.0_2.0') %>%
mutate(decile_c2_rezerwacje=ntile(c2_rezerwacje,5),
decile_c2_telefony=ntile(c2_telefony,5),
decile_c2_zapytania=ntile(c2_zapytania,5)) %>%
select(nazwisko_imie,matches('^c2_|decile'))
x1<- df_time %>%
inner_join(x %>%rename('decile'=decile_nazwa) %>%  select(-matches('^c2_')) %>% filter(decile %in% c(1,5)),by = c("nazwisko_imie")) %>%
rename('leady'=leady_nazwa,'c2'=c2_nazwa)%>%
filter(leady>wymagana_liczba_leadow)  %>%
mutate(month=as_date(month),decile=as.character(decile))
x2<- tidyr::crossing(month=unique(x1$month),nazwisko_imie=unique(x1$nazwisko_imie)) %>% left_join(x1) %>% group_by(nazwisko_imie)
x3<-x1 %>% group_by(decile) %>% summarise(c2_total=weighted.mean(c2,leady, na.rm=TRUE),
n_leadow=sum(leady),
seniority_continous=mean(seniority_continous)) %>% mutate(type=decile_nazwa)
plot<-x2%>%
plot_ly( x=~month,
y=~ c2,
color =~decile,
hoverinfo = "text",
text = ~paste("konsultant: ",nazwisko_imie,'\n',
"miesiac: ",month,'\n'),
type="scatter", mode="lines+markers") %>%
layout(yaxis=list(title =decile_nazwa))
newlist <- list(plot,x3)
}
remove(c2_nazwa)
library(patchwork)
plot1 <- f_decyl_per_kanal(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje')[[1]]
plot2 <- f_decyl_per_kanal(leady_nazwa='leady_telefony',decile_nazwa='decile_c2_telefony', c2_nazwa='c2_telefony')[[1]]
plot3<- f_decyl_per_kanal(leady_nazwa='leady_zapytania',decile_nazwa='decile_c2_zapytania', c2_nazwa='c2_zapytania')[[1]]
subplot(plot1,plot2,plot3,nrows = 3, margin = 0.1, titleY  = TRUE,showlegend=F)
f_decyl_per_kanal <- function(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje'){
wymagana_liczba_leadow<-ifelse(leady_nazwa=='leady_zapytania',20,40)
wymagana_liczba_miesiecy<-ifelse(leady_nazwa=='leady_zapytania',2,5)
x <<- df_konsultant %>% filter(n_month>wymagana_liczba_miesiecy & as.character(seniority) >='1.0_2.0') %>%
mutate(decile_c2_rezerwacje=ntile(c2_rezerwacje,5),
decile_c2_telefony=ntile(c2_telefony,5),
decile_c2_zapytania=ntile(c2_zapytania,5)) %>%
select(nazwisko_imie,matches('^c2_|decile'))
x1<- df_time %>%
inner_join(x %>%rename('decile'=decile_nazwa) %>%  select(-matches('^c2_')) %>% filter(decile %in% c(1,5)),by = c("nazwisko_imie")) %>%
rename('leady'=leady_nazwa,'c2'=c2_nazwa)%>%
filter(leady>wymagana_liczba_leadow)  %>%
mutate(month=as_date(month),decile=as.character(decile))
x2<- tidyr::crossing(month=unique(x1$month),nazwisko_imie=unique(x1$nazwisko_imie)) %>% left_join(x1) %>% group_by(nazwisko_imie)
x3<-x1 %>% group_by(decile) %>% summarise(c2_total=weighted.mean(c2,leady, na.rm=TRUE),
n_leadow=sum(leady),
seniority_continous=mean(seniority_continous)) %>% mutate(type=decile_nazwa)
plot<-x2%>%
plot_ly( x=~month,
y=~ c2,
color =~decile,
hoverinfo = "text",
text = ~paste("konsultant: ",nazwisko_imie,'\n',
"miesiac: ",month,'\n'),
type="scatter", mode="lines+markers",
showlegend = F) %>%
layout(yaxis=list(title =decile_nazwa))
newlist <- list(plot,x3)
}
plot1 <- f_decyl_per_kanal(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje')[[1]]
plot2 <- f_decyl_per_kanal(leady_nazwa='leady_telefony',decile_nazwa='decile_c2_telefony', c2_nazwa='c2_telefony')[[1]]
plot3<- f_decyl_per_kanal(leady_nazwa='leady_zapytania',decile_nazwa='decile_c2_zapytania', c2_nazwa='c2_zapytania')[[1]]
subplot(plot1,plot2,plot3,nrows = 3, margin = 0.1, titleY  = TRUE)
subplot(plot1,plot2,plot3,nrows = 3, titleY  = TRUE)
f_decyl_per_kanal[[2]]
f_decyl_per_kanal(leady_nazwa='leady_zapytania',decile_nazwa='decile_c2_zapytania', c2_nazwa='c2_zapytania')[[2]]
x1 <- f_decyl_per_kanal(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje')[[2]]
x2 <- f_decyl_per_kanal(leady_nazwa='leady_telefony',decile_nazwa='decile_c2_telefony', c2_nazwa='c2_telefony')[[2]]
x3<- f_decyl_per_kanal(leady_nazwa='leady_zapytania',decile_nazwa='decile_c2_zapytania', c2_nazwa='c2_zapytania')[[2]]
tabela(rbind(x1,x2,x3))
x1 <- f_decyl_per_kanal(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje')[[2]]
x2 <- f_decyl_per_kanal(leady_nazwa='leady_telefony',decile_nazwa='decile_c2_telefony', c2_nazwa='c2_telefony')[[2]]
x3<- f_decyl_per_kanal(leady_nazwa='leady_zapytania',decile_nazwa='decile_c2_zapytania', c2_nazwa='c2_zapytania')[[2]]
tabela(rbind(x1,x2,x3), caption='')
df <-rbind(data.frame(f_decyl_per_kanal(leady_nazwa='leady_rezerwacje',decile_nazwa='decile_c2_rezerwacje', c2_nazwa='c2_rezerwacje')[2]),
data.frame(f_decyl_per_kanal(leady_nazwa='leady_telefony',decile_nazwa='decile_c2_telefony', c2_nazwa='c2_telefony')[2]),
data.frame((f_decyl_per_kanal(leady_nazwa='leady_zapytania',decile_nazwa='decile_c2_zapytania', c2_nazwa='c2_zapytania')[2])))
p1 = lr_heatmap(x,'decile_c2_rezerwacje','decile_c2_telefony')
p2 = lr_heatmap(x,'decile_c2_rezerwacje','decile_c2_zapytania')
p3 = lr_heatmap(x,'decile_c2_telefony','decile_c2_zapytania')
(p1 |p2)/
(p3 |plot_spacer() )+
plot_annotation(title = paste0("wykres dotyczy metryki: "))
dbGetQuery(polaczenie_hurtownia_master,'select *
from analizy.pub.lukrab_consultants_tb_leads_with_ticket ticket
where 1=1 and id_pierwszej_sprzedanej_rezerwacji  =143047151')
?tabela
??tabela
setwd('/Users/lrabalski1/Desktop/Mrowisko/0_functions/')
source(knitr::purl("/0_funkcje_konsultanci.Rmd", quiet=TRUE))
setwd('/Users/lrabalski1/Desktop/Mrowisko/0_functions/')
source(knitr::purl("0_funkcje_konsultanci.Rmd", quiet=TRUE))
tabela(dbGetQuery(polaczenie_hurtownia_master,'select *
from analizy.pub.lukrab_consultants_tb_leads_with_ticket ticket
where 1=1 and id_pierwszej_sprzedanej_rezerwacji  =143047151'),
page_length = 23)
#Initalisation ----
message('1')
##biblioteki ----
library(DBI)
library(stringr)
library(stringi)
library(readr)
library(dplyr)
library(ggplot2)
library(RPostgreSQL)
library(readr)
library(data.table)
library(tictoc)
options(warn=-1)
dirs<-c("C:/Users/lrabalski/Desktop/Repozytoria/analytics/rscripts_2021.07.07/rscripts/",
"/data/www/final/rscripts/current/",
"/Users/mwojciechowski/rserwer/rscripts/",
"/Users/lrabalski1/Desktop/Repozytoria/rscripts/")
lokalizacja<-dirs[dir.exists(dirs)][[1]] # dirs[4] #
print(lokalizacja)
source(paste0(lokalizacja,"header_shiny.R"), encoding='UTF-8')
polaczenie_taskbox_slave = polaczenie_taskbox_slave()
polaczenie_analizy_slave = polaczenie_analizy_slave()
polaczenie_analizy_master = polaczenie_analizy_master()
polaczenie_ino_slave = polaczenie_ino_slave()
#polaczenie_hurtownia_master_RODBC = polaczenie_hurtownia_master_RODBC()
polaczenie_hurtownia_master = polaczenie_hurtownia_master()
pola
polaczenie_taskbox_slave = polaczenie_taskbox_slave()
# polaczenia a bazami ----
dirs<-c("C:/Users/lrabalski/Desktop/Repozytoria/analytics/rscripts_2021.07.07/rscripts/",
"/data/www/final/rscripts/current/",
"/Users/mwojciechowski/rserwer/rscripts/",
"/Users/lrabalski1/Desktop/Repozytoria/rscripts/")
lokalizacja<-dirs[dir.exists(dirs)][[1]] # dirs[4] #
print(lokalizacja)
source(paste0(lokalizacja,"header_shiny.R"), encoding='UTF-8')
polaczenie_taskbox_slave = polaczenie_taskbox_slave()
polaczenie_analizy_slave = polaczenie_analizy_slave()
polaczenie_analizy_master = polaczenie_analizy_master()
polaczenie_ino_slave = polaczenie_ino_slave()
#polaczenie_hurtownia_master_RODBC = polaczenie_hurtownia_master_RODBC()
polaczenie_hurtownia_master = polaczenie_hurtownia_master()
polaczenie_mysql_slave = polaczenie_mysql_slave()
## na macu polaczenie RODBC ma prawo sie wywalic
tryCatch({
polaczenie_hurtownia_master_RODBC = polaczenie_hurtownia_master_RODBC()},
error=function(cond) { },
warning=function(cond) {}
)
## jezeli RODBC sie wywala, ergo laczymy sie z maca, wtedy zastap funkcje i polaczenie odpowiednikami z ODBC
if (class(polaczenie_hurtownia_master_RODBC) == 'function'){
print("RODBC - connection NEGATIVE")
#sqlQuery = dbGetQuery
zapytanie_do_bazy <- function(query){
DBI::dbGetQuery(polaczenie_hurtownia_master, query)
}
}else {
print("RODBC - connection POSITIVE")
polaczenie_hurtownia_master_RODBC = polaczenie_hurtownia_master_RODBC
zapytanie_do_bazy <- function(query){
RODBC::sqlQuery(polaczenie_hurtownia_master_RODBC, query)
}
}
##uwierzytelnianie----
###uwierzytelnianie do googlesheets----
library(googlesheets4)
# wczytanie tokena
googlesheets4::gs4_auth(email='l.rabalski.wakacje@gmail.com',path = paste0(lokalizacja,".lukasz_secrets/projekt1-284112-6510ea423a3b.json"))
###uwierzytelnianie GA ----
####uwierzytelniania do RGoogleAnalytics uzywane w wpm_kampanie_ga ----
library(RGoogleAnalytics)
load(paste0(lokalizacja,".lukasz_secrets/token_file"))
print('xxx2')
ValidateToken(token)
####uwierzytelniania do googleAnalyticsR uzywane w web_vitals----
library(googleAnalyticsR)
googleAuthR::gar_set_client(json = paste0(lokalizacja,".lukasz_secrets/oauth-account-key.json"))
ga_auth(email = "lukasz-rabalski-wakacje-rcrede@buoyant-episode-358213.iam.gserviceaccount.com",
json_file = paste0(lokalizacja,".lukasz_secrets/Lukasz.Rabalski@wakacje_RCredentials_service-account-key.json"))
#view_id<-"ga:813798" # widok główny bez magazyny
#view_id<-"ga:179085872"  # widok główny z magazynem
#view_id<-"ga:266344046" # magazyn
dni_do_analizy='2022-11-02'
dates='2022-11-02'
# Retrieve vital metric data from GA events
ga <- google_analytics(viewId = view_id,
#date_range = c(Sys.Date()-1,Sys.Date()-1),
date_range = c(as_date(dates),as_date(dates)),
metrics = c("eventValue"),
max = -1,
dimensions = c("date","ga:pagePath","eventAction","eventCategory","eventLabel",
"deviceCategory")
,dim_filters = vitals_filter
)
## analizy.web_vitals ----
job='analizy.web_vitals'
print(job)
view_id<-"ga:179085872"
googleAuthR::gar_set_client(json = paste0(lokalizacja,".lukasz_secrets/oauth-account-key.json"))
ga_auth(email = "lukasz-rabalski-wakacje-rcrede@buoyant-episode-358213.iam.gserviceaccount.com",
json_file = paste0(lokalizacja,".lukasz_secrets/Lukasz.Rabalski@wakacje_RCredentials_service-account-key.json"))
# Filter to retrieve only web vital events
vitals_filter <- filter_clause_ga4(list(dim_filter(dimension = "eventCategory",
operator = "EXACT",
expressions = "Web Vitals"),
dim_filter(dimension = "eventAction",
operator = "REGEXP",
expressions = "FCP|TTFB|FID|CLS|LCP")
,dim_filter(dimension = "deviceCategory", operator = "IN_LIST", expressions = c("mobile","desktop"))
), operator = "AND")
# Experience thresholds are different for each metric
thresholds <- data.frame(metric=rep(c("CLS","FID","TTFB","FCP","LCP"),3),
quality=c(rep("Good",5),rep("Needs_Improvement",5),rep("Poor",5)),
fill_color=c(rep("#59A14F",5),rep("#F28E2B",5),rep("#E15759",5)),
start=c(0, 0, 0, 0, 0, .1, .1, .5, 2, 2.5, .25, .3, 1.5, 4, 4),
end=c(.1, .1, .5, 2, 2.5, .25, .3, 1.5, 4, 4, Inf, Inf, Inf, Inf, Inf))
thresholds_horiz <-thresholds %>% filter(quality!='Poor') %>% select(-fill_color, end) %>% reshape::cast(metric~quality)
start_date <- Sys.Date() - 30
already_in<-tryCatch({
sort(c(dbGetQuery(polaczenie_analizy_slave,paste0("select distinct date from analizy.public.web_vitals_ga_2 where date >='",start_date,"'")) %>% pull(date)))
}, error=function(e) {
print('nie polaczylo z baza')
c()
})
ostatnie_30_dni<-seq(as.Date(start_date),as.Date(Sys.Date()-1), by=1)
dni_do_analizy<-ostatnie_30_dni[!(ostatnie_30_dni %in% already_in)]
dates='2022-11-02'
# Retrieve vital metric data from GA events
ga <- google_analytics(viewId = view_id,
#date_range = c(Sys.Date()-1,Sys.Date()-1),
date_range = c(as_date(dates),as_date(dates)),
metrics = c("eventValue"),
max = -1,
dimensions = c("date","ga:pagePath","eventAction","eventCategory","eventLabel",
"deviceCategory")
,dim_filters = vitals_filter
)
??google_analytics
# Retrieve vital metric data from GA events
ga <- google_analytics(viewId = view_id,
#date_range = c(Sys.Date()-1,Sys.Date()-1),
date_range = c(as_date(dates),as_date(dates)),
metrics = c("eventValue"),
max = -1,
anti_sample = TRUE,
dimensions = c("date","ga:pagePath","eventAction","eventCategory","eventLabel",
"deviceCategory")
,dim_filters = vitals_filter
)
blogdown::serve_site()
sales <- data.table(
SaleId = c("S1", "S2", "S3", "S4", "S5"),
SaleDate = as.Date(c("2014-2-20", "2014-5-1", "2014-6-15", "2014-7-1", "2014-12-31"))
)
library(data.table)
library(dplyr)
library(data.table)
sales <- data.table(
SaleId = c("S1", "S2", "S3", "S4", "S5"),
SaleDate = as.Date(c("2014-2-20", "2014-5-1", "2014-6-15", "2014-7-1", "2014-12-31"))
)
commercials <- data.table(
CommercialId = c("C1", "C2", "C3", "C4"),
CommercialDate = as.Date(c("2014-1-1", "2014-4-1", "2014-7-1", "2014-9-15"))
)
setkey(sales, "SaleDate")
setkey(commercials, "CommercialDate")
sales[commercials, roll = TRUE]
setkey(sales, "RollDate")
sales <- data.table(
SaleId = c("S1", "S2", "S3", "S4", "S5"),
SaleDate = as.Date(c("2014-2-20", "2014-5-1", "2014-6-15", "2014-7-1", "2014-12-31"))
)
commercials <- data.table(
CommercialId = c("C1", "C2", "C3", "C4"),
CommercialDate = as.Date(c("2014-1-1", "2014-4-1", "2014-7-1", "2014-9-15"))
)
sales[, RollDate := SaleDate]
commercials[, RollDate := CommercialDate]
setkey(sales, "RollDate")
setkey(commercials, "RollDate")
sales[commercials, roll = TRUE]
sales[commercials, roll = TRUE]
f<-list.files('/Users/lrabalski1/Desktop/Repozytoria/birt', full.names = TRUE, pattern = 'bok_produkty')
f<-list.files('/Users/lrabalski1/Desktop/Repozytoria/birt', full.names = TRUE, pattern = '_produkty')
f
q<- readr::read_file(f)
q<- readr::read_file(f) %>% str_extract(pattern = '(?<=<xml-property name="queryText">)[\\S\\s]+?(?=<\\/xml-property>)') %>%
str_replace_all(coll('<![CDATA['),'') %>%
str_replace_all('\\]\\]>$','')
dirs<-c("C:/Users/lrabalski/Desktop/Repozytoria/analytics/rscripts_2021.07.07/rscripts/",
"/data/www/final/rscripts/current/",
"/Users/mwojciechowski/rserwer/rscripts/",
"/Users/lrabalski1/Desktop/Repozytoria/rscripts/")
lokalizacja<-dirs[dir.exists(dirs)][[1]] # dirs[4] #
source(paste0(lokalizacja,"header.R"), encoding='UTF-8')
q<- readr::read_file(f) %>% str_extract(pattern = '(?<=<xml-property name="queryText">)[\\S\\s]+?(?=<\\/xml-property>)') %>%
str_replace_all(coll('<![CDATA['),'') %>%
str_replace_all('\\]\\]>$','')
write_file(q,'output/bok_produkty/bok_produkty_query.sql')
commercials[sales, roll = TRUE]
sales[commercials, roll = TRUE]
commercials[sales, roll = TRUE]
commercials[sales, roll = -Inf]
#markdown ----
knitr::opts_chunk$set(#fig.width=12,
fig.height=4,
out.width = '100%'
)
knitr::opts_chunk$set(include =TRUE, #prevents code and results from appearing in the finished file. R Markdown still runs the code in the chunk, and the results can be used by other chunks.
echo = FALSE, #echo = FALSE prevents code, but not the results from appearing in the finished file. This is a useful way to embed figures.
warning = FALSE,
message =FALSE
)
options(scipen=999)
#markdown ----
knitr::opts_chunk$set(#fig.width=12,
fig.height=4,
out.width = '100%'
)
knitr::opts_chunk$set(include =TRUE, #prevents code and results from appearing in the finished file. R Markdown still runs the code in the chunk, and the results can be used by other chunks.
echo = TRUE, #echo = FALSE prevents code, but not the results from appearing in the finished file. This is a useful way to embed figures.
warning = FALSE,
message =FALSE
)
options(scipen=999)
2^8
require(zoo)
require(data.table)
library(dplyr)
library(lubridate)
unemp <- fread("bezrobocie_USA.csv") %>% data.table::melt( id.vars='Year',
variable.name = "months",
value.name='UNRATE') %>% left_join(
data.frame(month_nr=c(1:12),
months= c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec"))
) %>% mutate(DATE=as_date('0000-01-01',format = '%Y-%m-%d')+years(as.numeric(Year)) + months(month_nr-1)) %>%
select(DATE, UNRATE)
require(zoo)
require(data.table)
library(dplyr)
library(lubridate)
unemp <- fread("bezrobocie_USA.csv") %>% data.table::melt( id.vars='Year',
variable.name = "months",
value.name='UNRATE') %>% left_join(
data.frame(month_nr=c(1:12),
months= c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec"))
) %>% mutate(DATE=as_date('0000-01-01',format = '%Y-%m-%d')+years(as.numeric(Year)) + months(month_nr-1)) %>%
select(DATE, UNRATE)
blogdown::new_post(title = "Unit Tests",
ext = '.Rmd',
subdir = "post")
reticulate::repl_python()
