library(blogdown)
new_site(theme ='yihui/hugo-xmin')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::new_post(title = "Hi Hugo",
ext = '.Rmarkdown',
subdir = "post")
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
options(blogdown.method = "markdown")
file.edit(".Rprofile")
file.edit(file.path("~", ".Rprofile"))
file.edit(file.path("~", ".Rprofile"))
# HUGO XMIN
file.edit(file.path("~", ".Rprofile"))
## _Keep it simple, but not simpler_
candidates <- c( Sys.getenv("R_PROFILE"),
file.path(Sys.getenv("R_HOME"), "etc", "Rprofile.site"),
Sys.getenv("R_PROFILE_USER"),
file.path(getwd(), ".Rprofile"),
file.path(Sys.getenv("HOME"), ".Rprofile"))
Filter(file.exists, candidates)
file.edit(file.path("~", "/Users/lrabalski1/.Rprofile"))
file.edit(file.path("/Users/lrabalski1/.Rprofile"))
Sys.getenv("HOME")
file.path(Sys.getenv("HOME"), ".Rprofile")
file.path(Sys.getenv("HOME"), ".Rprofile")
file.edit(file.path(Sys.getenv("HOME"), ".Rprofile"))
blogdown::serve_site()
`options(blogdown.method = "markdown")`
options(blogdown.method = "markdown")
file.edit(".Rprofile")
file.edit(file.path("~", ".Rprofile"))
blogdown::serve_site()
options(blogdown.method = "markdown")
file.edit(file.path("~", ".Rprofile"))
file.edit(file.path("~", ".Rprofile"))
file.edit(".Rprofile")
blogdown::serve_site()
file.edit(file.path("~", ".Rprofile"))
file.edit(".Rprofile")
blogdown::serve_site()
file.edit(".Rprofile")
blogdown::serve_site()
blogdown::serve_site()
#markdown ----
tabela<- function(df, caption){
DT::datatable(data = df,
extensions = 'Buttons',
caption = caption,
options = list(dom = "Blfrtip",pageLength = 10, lengthMenu = c(10, 25, 200),scrollX=TRUE, buttons = c('copy', 'csv', 'excel')
,columnDefs = list(list(className = 'dt-center',targets="_all"))
),
rownames = FALSE,
class = "display")
}
knitr::opts_chunk$set(#fig.width=12,
fig.height=4,
out.width = '100%'
)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message =FALSE,
include =FALSE)
options(scipen=999)
#plotly ----
#https://stackoverflow.com/questions/34093169/horizontal-vertical-line-in-plotly
vline <- function(x = 0, color = "blue", dash="dash") {
list(
type = "line",
y0 = 0,
y1 = 1,
yref = "paper", #(this puts the graph region on a 0-1 scale, rather than on the x/y data scale)
x0 = x,
x1 = x,
line = list(color = color, dash=dash)
)
}
hline <- function(y = 0, color = "blue") {
list(
type = "line",
x0 = 0,
x1 = 1,
xref = "paper", #(this puts the graph region on a 0-1 scale, rather than on the x/y data scale)
y0 = y,
y1 = y,
line = list(color = color)
)
}
library(DBI)
library(stringr)
library(stringi)
library(readr)
library(dplyr)
library(ggplot2)
library(RPostgreSQL)
library(readr)
library(data.table)
library(scales)
library(lubridate)
library(plotly)
#dla celow markdowna
library(kableExtra)
library(knitr)
library(DT)
# polaczenia ----
tryCatch({
source(("/data/www/final/rscripts/current/header_shiny.R"), encoding='UTF-8')
}, error=function(e) {
source(("C:/Users/lrabalski/Desktop/Mrowisko/header.R"), encoding='UTF-8')
}, error=function(e) {
source('/Users/lrabalski1/Desktop/Repozytoria/rscripts/header.R', encoding='UTF-8')
}
)
polaczenie_taskbox_slave = polaczenie_taskbox_slave()
polaczenie_analizy_slave = polaczenie_analizy_slave()
polaczenie_analizy_master = polaczenie_analizy_master()
polaczenie_ino_slave = polaczenie_ino_slave()
#polaczenie_hurtownia_master_RODBC = polaczenie_hurtownia_master_RODBC()
polaczenie_hurtownia_master = polaczenie_hurtownia_master()
polaczenie_mysql_slave = polaczenie_mysql_slave()
polaczenie_agreements_slave = polaczenie_agreements_slave()
polaczenie_mongo = polaczenie_mongo()
## na macu polaczenie RODBC ma prawo sie wywalic
tryCatch({
polaczenie_hurtownia_master_RODBC = polaczenie_hurtownia_master_RODBC()},
error=function(cond) { },
warning=function(cond) {}
)
## jezeli RODBC sie wywala, ergo laczymy sie z maca, wtedy zastap funkcje i polaczenie odpowiednikami z ODBC
if (class(polaczenie_hurtownia_master_RODBC) == 'function'){
print("RODBC - connection NEGATIVE")
#sqlQuery = dbGetQuery
zapytanie_do_bazy <- function(query){
DBI::dbGetQuery(polaczenie_hurtownia_master, query)
}
}else {
print("RODBC - connection POSITIVE")
zapytanie_do_bazy <- function(query){
RODBC::sqlQuery(polaczenie_hurtownia_master_RODBC, query)
}
}
#autoryzowanie chmury
library('Microsoft365R')
library('AzureAuth')
scopes <- c(
"https://graph.microsoft.com/Files.ReadWrite.All",
"https://graph.microsoft.com/User.Read",
"openid", "offline_access"
)
app <- "d44a05d5-c6a5-4bbb-82d2-443123722380" # for local use only
token <- AzureAuth::get_azure_token(scopes, "grupawppl", app, version=2, auth_type="device_code")
odb <- get_business_onedrive(token=token,tenant="grupawppl")
x<-odb$list_files('Tagowanie/Inne')
# odb$download_file(src="Tagowanie/Inne/TASKI NAZWY KLIENT_AGENT priorytet kategorii (2).xlsx",
#                   dest='/Users/lrabalski1/Desktop/Mrowisko/000Pracownicy/000_Różycki_Adrian/2022.03.05 test automatyzacji/mapowanie.xlsx',
#                   overwrite = TRUE)
dbCallProc(polaczenie_hurtownia_master,'analizy.[dbo].[Analizy_graph_product_feed]')
?sqlExecute
RODBC::sqlExecute(polaczenie_hurtownia_master, 'exec analizy.[dbo].[Analizy_graph_product_feed]',
fetch = TRUE, as.is=T)
??sqlExecute
dbExecute(polaczenie_hurtownia_master,'exec analizy.[dbo].[Analizy_graph_product_feed]')
df<-zapytanie_do_bazy('select * from analizy.pub.graph_product_feed')
View(df)
x<-df %>%
group_by(product_id)  %>%
summarise(starts_at_date=as.character(list(unique(starts_at_date))),
id_lotnisko_wylotu=as.character(list(unique(id_lotnisko_wylotu))),
mean_cena_1_pax = round(mean(cena_wak_1_pax),2))
df_final<-df %>% select(-starts_at_date,-id_lotnisko_wylotu, -cena_wak_1_pax) %>% unique() %>%
left_join(x)
View(df_final)
x<-df %>%
group_by(product_id)  %>%
summarise(cron_started_at = max(cron_started_at),
starts_at_date=as.character(list(unique(starts_at_date))),
id_lotnisko_wylotu=as.character(list(unique(id_lotnisko_wylotu))),
mean_cena_1_pax = round(mean(cena_wak_1_pax),2))
df_final<-df %>% select(-starts_at_date,-id_lotnisko_wylotu, -cena_wak_1_pax,-cron_started_at) %>% unique() %>%
left_join(x)
View(df_final)
sum(duplicated(df_final$product_id))
sum(duplicated(df_final$id_mds_oferty))
df_final[duplicated(df_final$id_mds_oferty)]
df_final[duplicated(df_final$id_mds_oferty),]
View(df_final)
dbExecute(polaczenie_hurtownia_master,'exec analizy.[dbo].[Analizy_graph_product_feed]')
df<-zapytanie_do_bazy('select * from analizy.pub.graph_product_feed')
x<-df %>%
group_by(product_id)  %>%
summarise(cron_started_at = max(cron_started_at),
starts_at_date=as.character(list(unique(starts_at_date))),
id_lotnisko_wylotu=as.character(list(unique(id_lotnisko_wylotu))),
mean_cena_1_pax = round(mean(cena_wak_1_pax),2))
df_final<-df %>% select(-starts_at_date,-id_lotnisko_wylotu, -cena_wak_1_pax,-cron_started_at) %>% unique() %>%
left_join(x)
View(df_final)
dbExecute(polaczenie_hurtownia_master,'exec analizy.[dbo].[Analizy_graph_product_feed]')
df<-zapytanie_do_bazy('select * from analizy.pub.graph_product_feed')
x<-df %>%
group_by(product_id)  %>%
summarise(cron_started_at = max(cron_started_at),
starts_at_date=as.character(list(unique(starts_at_date))),
id_lotnisko_wylotu=as.character(list(unique(id_lotnisko_wylotu))),
mean_cena_1_pax = round(mean(cena_wak_1_pax),2))
df_final<-df %>% select(-starts_at_date,-id_lotnisko_wylotu, -cena_wak_1_pax,-cron_started_at) %>% unique() %>%
left_join(x)
View(df_final)
blogdown:::preview_site()
Sys.setenv(RETICULATE_PYTHON = "/Users/lrabalski1/miniforge3/envs/everyday_use/bin/python")
#reticulate::py_config()
reticulate::py_config()
myenvs=conda_list()
library(reticulate)
myenvs=conda_list()
myenvs=conda_list()
envname=myenvs$name[3]
envname
library(reticulate)
myenvs=conda_list()
envname=myenvs$name[3]
use_condaenv(envname, required = TRUE)
#reticulate::py_config()
reticulate::repl_python()
library(reticulate)
library(reticulate)
myenvs=conda_list()
envname=myenvs$name[3]
envname
use_condaenv(envname, required = TRUE)
reticulate::repl_python()
quit
library(reticulate)
myenvs=conda_list()
envname=myenvs$name[5]
use_condaenv(envname, required = TRUE)
reticulate::repl_python()
