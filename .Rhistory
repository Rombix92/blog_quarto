df_optimal_cutof<-data.frame()
i=1
df_optimal_cutof_within_epok<-data.frame()
for (i in seq(1,liczba_kategorii)){
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))  #%>% filter(type=='test')
kategoria=colnames(z)[3]
z$kategoria=kategoria
colnames(z)<-colnam
if (sum(z$label)>0){
#optimal cutoff
library("OptimalCutpoints")
#ile razy bardziej nadreprezentowana są braki zdarzenia (nie wystapeienie kategorii), wzgledem zdarzeń - teoretycznie o ile bardziej wazne, natomiast ja maksymalnie chce przypisac nizsza wartosci, bo braki zdarzenia sa bardziej awersyjne
CFN_value= ifelse(1/mean(z$label)<5,1/mean(z$label),5)
oc <- optimal.cutpoints(X = "p", status = "label", methods="MCT",control =control.cutpoints('CFN'=CFN_value),
data=z, tag.healthy = "0")
x<-as.data.frame(oc$MCT$Global$optimal.cutoff) %>% head(1)
colnames(x)<-names(oc$MCT$Global$optimal.cutoff)
cut_off_val=x$cutoff
print(i)
print(cut_off_val)
x$kategoria=kategoria
df_optimal_cutof_within_epok <- rbind(x,df_optimal_cutof_within_epok)
}
}
df_optimal_cutof<- rbind(df_optimal_cutof_within_epok,df_optimal_cutof)
View(df_optimal_cutof)
oc
as.data.frame(oc$MCT$Global$optimal.cutoff) %>% head(1)
names(oc$MCT$Global$optimal.cutoff)
df_optimal_cutof %>% filter(nr_epoki==analizuje_epoke) %>% select(cutoff,kategoria) %>% tidyr::pivot_wider(names_from = kategoria, values_from = cutoff) %>%
select(any_of(colnames(df))) %>% data.frame()
df_optimal_cutof %>% select(cutoff,kategoria) %>% tidyr::pivot_wider(names_from = kategoria, values_from = cutoff) %>%
select(any_of(colnames(df))) %>% data.frame()
View(df_optimal_cutof)
x<-df_optimal_cutof %>% select(cutoff,kategoria) %>% tidyr::pivot_wider(names_from = kategoria, values_from = cutoff) %>%
select(any_of(colnames(df))) %>% data.frame()
View(x)
liczba_kategorii
i
i=1
z<-df %>% select(all_of(sel))
kat=colnames(z)[6]
z$kategoria=kat
colnames(z)<-colnam
cut_off_val=cut_off_final %>% filter(kategoria ==kat) %>% pull(cutoff)
cut_off_final<- df_optimal_cutof  %>% select(cutoff,kategoria)
i=1
for (i in seq(1,liczba_kategorii)){
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))
kat=colnames(z)[6]
z$kategoria=kat
colnames(z)<-colnam
cut_off_val=cut_off_final %>% filter(kategoria ==kat) %>% pull(cutoff)
z <- z %>% mutate(label_predict=ifelse(p<cut_off_val,0,1))
df_label_within_epok<-rbind(z,df_label_within_epok)
}
z<-df %>% select(all_of(sel))
kat=colnames(z)[6]
z$kategoria=kat
colnames(z)<-colnam
cut_off_val=cut_off_final %>% filter(kategoria ==kat) %>% pull(cutoff)
z <- z %>% mutate(label_predict=ifelse(p<cut_off_val,0,1))
z <- z %>% mutate(label_predict=ifelse(p<cut_off_val,0,1))
cut_off_val
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))  #%>% filter(type=='test')
kategoria=colnames(z)[3]
z$kategoria=kategoria
z$i <- i
View(z)
df_optimal_cutof<-data.frame()
i=1
df_optimal_cutof_within_epok<-data.frame()
for (i in seq(1,liczba_kategorii)){
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))  #%>% filter(type=='test')
kategoria=colnames(z)[3]
z$kategoria=kategoria
z$i <- i
colnames(z)<-colnam
if (sum(z$label)>0){
#optimal cutoff
library("OptimalCutpoints")
#ile razy bardziej nadreprezentowana są braki zdarzenia (nie wystapeienie kategorii), wzgledem zdarzeń - teoretycznie o ile bardziej wazne, natomiast ja maksymalnie chce przypisac nizsza wartosci, bo braki zdarzenia sa bardziej awersyjne
CFN_value= ifelse(1/mean(z$label)<5,1/mean(z$label),5)
oc <- optimal.cutpoints(X = "p", status = "label", methods="MCT",control =control.cutpoints('CFN'=CFN_value),
data=z, tag.healthy = "0")
x<-as.data.frame(oc$MCT$Global$optimal.cutoff) %>% head(1)
colnames(x)<-names(oc$MCT$Global$optimal.cutoff)
cut_off_val=x$cutoff
print(i)
print(cut_off_val)
x$kategoria=kategoria
df_optimal_cutof_within_epok <- rbind(x,df_optimal_cutof_within_epok)
}
}
df_optimal_cutof<- rbind(df_optimal_cutof_within_epok,df_optimal_cutof)
View(df_optimal_cutof)
View(df_optimal_cutof)
cut_off_val
i=1
for (i in seq(1,liczba_kategorii)){
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))
kat=colnames(z)[6]
z$kategoria=kat
colnames(z)<-colnam
if(kat %in% unique(cut_off_final$kategoria)){
cut_off_val=cut_off_final %>% filter(kategoria ==kat) %>% pull(cutoff)
z <- z %>% mutate(label_predict=ifelse(p<cut_off_val,0,1))
df_label_within_epok<-rbind(z,df_label_within_epok)
}
}
i=1
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))
kat=colnames(z)[6]
z$kategoria=kat
colnames(z)<-colnam
View(z)
z<-df %>% select(all_of(sel))
View(z)
for (i in seq(1,liczba_kategorii)){
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))
kat=colnames(z)[3]
z$kategoria=kat
colnames(z)<-colnam
if(kat %in% unique(cut_off_final$kategoria)){
cut_off_val=cut_off_final %>% filter(kategoria ==kat) %>% pull(cutoff)
z <- z %>% mutate(label_predict=ifelse(p<cut_off_val,0,1))
df_label_within_epok<-rbind(z,df_label_within_epok)
}
df_label_within_epok
}
for (i in seq(1,liczba_kategorii)){
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))
kat=colnames(z)[3]
z$kategoria=kat
colnames(z)<-colnam
if(kat %in% unique(cut_off_final$kategoria)){
cut_off_val=cut_off_final %>% filter(kategoria ==kat) %>% pull(cutoff)
z <- z %>% mutate(label_predict=ifelse(p<cut_off_val,0,1))
df_label_within_epok<-rbind(z,df_label_within_epok)
}
}
df_label_within_epok<-data.frame()
for (i in seq(1,liczba_kategorii)){
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))
kat=colnames(z)[3]
z$kategoria=kat
colnames(z)<-colnam
if(kat %in% unique(cut_off_final$kategoria)){
cut_off_val=cut_off_final %>% filter(kategoria ==kat) %>% pull(cutoff)
z <- z %>% mutate(label_predict=ifelse(p<cut_off_val,0,1))
df_label_within_epok<-rbind(z,df_label_within_epok)
}
}
View(df_label_within_epok)
df_label_all2<- df_label_all %>% mutate(label=ifelse(label==1,'TRUE','FALSE')) %>% filter(!is.na(label))
df_label_all2<- df_label_all %>% mutate(label=ifelse(label==1,'TRUE','FALSE')) %>% filter(!is.na(label))
df_label_all<- rbind(df_label_within_epok %>% mutate(nr_epoki=epoka),df_label_all)
df_label_all<-data.frame()
df_label_all<- rbind(df_label_within_epok ,df_label_all)
df_label_all2<- df_label_all %>% mutate(label=ifelse(label==1,'TRUE','FALSE')) %>% filter(!is.na(label))
contingency <- df_label_all2 #%>% filter(nr_epoki==analizuje_epoke)
# Sensitivity: the ability of a test to correctly identify patients with a disease.
# Specificity: the ability of a test to correctly identify people without the disease.
#table(contingency$label,contingency$label_predict, contingency$kategoria)
cont_table<-contingency%>%
group_by(kategoria,nr_epoki, label,label_predict)%>%
summarise(n=n()) %>%
#rbind()
tidyr::spread(label_predict, n)%>% data.frame() %>% replace(is.na(.),0)  %>% mutate(metryka=ifelse(label=='FALSE','swoistość','czułość'), #kiedy mierze sukces dla porazek to jest to swoistosc
value=ifelse(metryka=='swoistość',X0/(X0+X1),
ifelse(metryka=='czułość',X1/(X0+X1),NA)))
# Sensitivity: the ability of a test to correctly identify patients with a disease.
# Specificity: the ability of a test to correctly identify people without the disease.
#table(contingency$label,contingency$label_predict, contingency$kategoria)
cont_table<-contingency%>%
group_by(kategoria, label,label_predict)%>%
summarise(n=n()) %>%
#rbind()
tidyr::spread(label_predict, n)%>% data.frame() %>% replace(is.na(.),0)  %>% mutate(metryka=ifelse(label=='FALSE','swoistość','czułość'), #kiedy mierze sukces dla porazek to jest to swoistosc
value=ifelse(metryka=='swoistość',X0/(X0+X1),
ifelse(metryka=='czułość',X1/(X0+X1),NA)))
View(cont_table)
View(cont_table)
View(df)
df_val<-read.csv(paste0('wyniki/val_df.csv'), fileEncoding = 'UTF-8', sep=';') %>% select(-X)
df_pred<-read.csv(paste0('wyniki/val_df_pred.csv'), fileEncoding = 'UTF-8', sep=';') %>% select(-X)
df<-cbind(df_val,df_pred)
x<-df  %>%# filter(type=='test')  %>%
select(matches('_KATEGOR$')) %>% summarise_all(sum)
liczba_kategorii=ncol(df %>% select(matches('_KATEGOR$')))
# colnames(df)[(ncol(df)-liczba_kategorii+1):ncol(df)]<-paste0('prob_',colnames(df %>% select(matches('_KATEGOR$'))))
colnam=c('filename','text','label','p','kategoria')
df_optimal_cutof<-data.frame()
i=1
df_optimal_cutof_within_epok<-data.frame()
for (i in seq(1,liczba_kategorii)){
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))  #%>% filter(type=='test')
kategoria=colnames(z)[3]
z$kategoria=kategoria
colnames(z)<-colnam
if (sum(z$label)>0){
#optimal cutoff
library("OptimalCutpoints")
#ile razy bardziej nadreprezentowana są braki zdarzenia (nie wystapeienie kategorii), wzgledem zdarzeń - teoretycznie o ile bardziej wazne, natomiast ja maksymalnie chce przypisac nizsza wartosci, bo braki zdarzenia sa bardziej awersyjne
CFN_value= ifelse(1/mean(z$label)<5,1/mean(z$label),5)
oc <- optimal.cutpoints(X = "p", status = "label", methods="MCT",control =control.cutpoints('CFN'=CFN_value),
data=z, tag.healthy = "0")
x<-as.data.frame(oc$MCT$Global$optimal.cutoff) %>% head(1)
colnames(x)<-names(oc$MCT$Global$optimal.cutoff)
cut_off_val=x$cutoff
print(i)
print(cut_off_val)
x$kategoria=kategoria
df_optimal_cutof_within_epok <- rbind(x,df_optimal_cutof_within_epok)
}
}
df_optimal_cutof<- rbind(df_optimal_cutof_within_epok,df_optimal_cutof)
cut_off_final<- df_optimal_cutof  %>% select(cutoff,kategoria)
i=1
df_label_all<-data.frame()
df_label_within_epok<-data.frame()
for (i in seq(1,liczba_kategorii)){
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))
kat=colnames(z)[3]
z$kategoria=kat
colnames(z)<-colnam
if(kat %in% unique(cut_off_final$kategoria)){
cut_off_val=cut_off_final %>% filter(kategoria ==kat) %>% pull(cutoff)
z <- z %>% mutate(label_predict=ifelse(p<cut_off_val,0,1))
df_label_within_epok<-rbind(z,df_label_within_epok)
}
}
df_label_all<- rbind(df_label_within_epok ,df_label_all)
df_label_all2<- df_label_all %>% mutate(label=ifelse(label==1,'TRUE','FALSE')) %>% filter(!is.na(label))
contingency <- df_label_all2 #%>% filter(nr_epoki==analizuje_epoke)
# Sensitivity: the ability of a test to correctly identify patients with a disease.
# Specificity: the ability of a test to correctly identify people without the disease.
#table(contingency$label,contingency$label_predict, contingency$kategoria)
cont_table<-contingency%>%
group_by(kategoria, label,label_predict)%>%
summarise(n=n()) %>%
#rbind()
tidyr::spread(label_predict, n)%>% data.frame() %>% replace(is.na(.),0)  %>% mutate(metryka=ifelse(label=='FALSE','swoistość','czułość'), #kiedy mierze sukces dla porazek to jest to swoistosc
value=ifelse(metryka=='swoistość',X0/(X0+X1),
ifelse(metryka=='czułość',X1/(X0+X1),NA)))
# Sensitivity: the ability of a test to correctly identify patients with a disease.
# Specificity: the ability of a test to correctly identify people without the disease.
#table(contingency$label,contingency$label_predict, contingency$kategoria)
cont_table<-contingency%>%
group_by(kategoria, label,label_predict)%>%
summarise(n=n()) %>%
#rbind()
tidyr::spread(label_predict, n)%>% data.frame() %>% replace(is.na(.),0)  %>% mutate(metryka=ifelse(label=='FALSE','swoistość','czułość'), #kiedy mierze sukces dla porazek to jest to swoistosc
value=ifelse(metryka=='swoistość',X0/(X0+X1),
ifelse(metryka=='czułość',X1/(X0+X1),NA)))
View(cont_table)
View(contingency)
cont_table_wide <- cont_table %>%
tidyr::pivot_wider(id_cols = c(nr_epoki,kategoria), names_from = metryka,values_from = value) %>%
data.frame() %>%  left_join(
#accuracy
df_label_all%>%  filter(!is.na(label)) %>%
group_by(kategoria,nr_epoki) %>%
summarise(accuracy=sum(label==label_predict)/n())) %>% left_join(n_kat) %>%
mutate(status_kat=as.character(ifelse(n_maili<200,'1.zwiekszyc pule',
ifelse(accuracy<0.80 & n_maili<400,'2.slaby wynik, wybrac nowe,ODPOWIEDNIE maile',
ifelse(accuracy<0.7,'3.słaba ta kategoria, nie polepszymy od tak zwiększając pule',
'4.kategoria ok'))))) %>% data.frame() %>%
arrange(-nr_epoki,status_kat)
cont_table_wide <- cont_table %>%
tidyr::pivot_wider(id_cols = c(nr_epoki,kategoria), names_from = metryka,values_from = value) %>%
data.frame() %>%  left_join(
#accuracy
df_label_all%>%  filter(!is.na(label)) %>%
group_by(kategoria,nr_epoki) %>%
summarise(accuracy=sum(label==label_predict)/n())) %>% left_join(n_kat) %>%
mutate(status_kat=as.character(ifelse(n_maili<200,'1.zwiekszyc pule',
ifelse(accuracy<0.80 & n_maili<400,'2.slaby wynik, wybrac nowe,ODPOWIEDNIE maile',
ifelse(accuracy<0.7,'3.słaba ta kategoria, nie polepszymy od tak zwiększając pule',
'4.kategoria ok'))))) %>% data.frame() %>%
arrange(-nr_epoki,status_kat)
cont_table_wide <- cont_table %>%
tidyr::pivot_wider(id_cols = c(kategoria), names_from = metryka,values_from = value) %>%
data.frame() %>%  left_join(
#accuracy
df_label_all%>%  filter(!is.na(label)) %>%
group_by(kategoria) %>%
summarise(accuracy=sum(label==label_predict)/n())) %>% left_join(n_kat) %>%
mutate(status_kat=as.character(ifelse(n_maili<200,'1.zwiekszyc pule',
ifelse(accuracy<0.80 & n_maili<400,'2.slaby wynik, wybrac nowe,ODPOWIEDNIE maile',
ifelse(accuracy<0.7,'3.słaba ta kategoria, nie polepszymy od tak zwiększając pule',
'4.kategoria ok'))))) %>% data.frame() %>%
arrange(status_kat)
n_kat<- df %>% summarise_if(is.numeric,sum, na.rm=TRUE) %>% select(matches('_KATEGOR$')) %>% tidyr::pivot_longer(cols=everything()) %>% rename(kategoria=name,'n_maili'='value')
View(n_kat)
cont_table_wide <- cont_table %>%
tidyr::pivot_wider(id_cols = c(kategoria), names_from = metryka,values_from = value) %>%
data.frame() %>%  left_join(
#accuracy
df_label_all%>%  filter(!is.na(label)) %>%
group_by(kategoria) %>%
summarise(accuracy=sum(label==label_predict)/n())) %>% left_join(n_kat) %>%
mutate(status_kat=as.character(ifelse(n_maili<200,'1.zwiekszyc pule',
ifelse(accuracy<0.80 & n_maili<400,'2.slaby wynik, wybrac nowe,ODPOWIEDNIE maile',
ifelse(accuracy<0.7,'3.słaba ta kategoria, nie polepszymy od tak zwiększając pule',
'4.kategoria ok'))))) %>% data.frame() %>%
arrange(status_kat)
View(cont_table_wide)
View(cont_table_wide)
View(cont_table_wide)
df_test<-read.csv(paste0('wyniki/test_df.csv'), fileEncoding = 'UTF-8', sep=';') %>% select(-X)
df_test<-read.csv(paste0('wyniki/test_df.csv'), fileEncoding = 'UTF-8', sep=';') %>% select(-X)
df_test_pred<-read.csv(paste0('wyniki/test_df_pred.csv.csv'), fileEncoding = 'UTF-8', sep=';') %>% select(-X)
df_test_pred<-read.csv(paste0('wyniki/test_df_pred.csv.csv'), fileEncoding = 'UTF-8', sep=';') %>% select(-X)
df_test_pred<-read.csv(paste0('wyniki/test_df_pred.csv'), fileEncoding = 'UTF-8', sep=';') %>% select(-X)
df<-cbind(df_val,df_pred)
df_test<-read.csv(paste0('wyniki/test_df.csv'), fileEncoding = 'UTF-8', sep=';') %>% select(-X)
df_test_pred<-read.csv(paste0('wyniki/test_df_pred.csv'), fileEncoding = 'UTF-8', sep=';') %>% select(-X)
df<-cbind(df_val,df_pred)
x<-df  %>%# filter(type=='test')  %>%
select(matches('_KATEGOR$')) %>% summarise_all(sum)
liczba_kategorii=ncol(df %>% select(matches('_KATEGOR$')))
# colnames(df)[(ncol(df)-liczba_kategorii+1):ncol(df)]<-paste0('prob_',colnames(df %>% select(matches('_KATEGOR$'))))
colnam=c('filename','text','label','p','kategoria')
df_optimal_cutof<-data.frame()
i=1
df_optimal_cutof_within_epok<-data.frame()
for (i in seq(1,liczba_kategorii)){
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))  #%>% filter(type=='test')
kategoria=colnames(z)[3]
z$kategoria=kategoria
colnames(z)<-colnam
if (sum(z$label)>0){
#optimal cutoff
library("OptimalCutpoints")
#ile razy bardziej nadreprezentowana są braki zdarzenia (nie wystapeienie kategorii), wzgledem zdarzeń - teoretycznie o ile bardziej wazne, natomiast ja maksymalnie chce przypisac nizsza wartosci, bo braki zdarzenia sa bardziej awersyjne
CFN_value= ifelse(1/mean(z$label)<5,1/mean(z$label),5)
oc <- optimal.cutpoints(X = "p", status = "label", methods="MCT",control =control.cutpoints('CFN'=CFN_value),
data=z, tag.healthy = "0")
x<-as.data.frame(oc$MCT$Global$optimal.cutoff) %>% head(1)
colnames(x)<-names(oc$MCT$Global$optimal.cutoff)
cut_off_val=x$cutoff
print(i)
print(cut_off_val)
x$kategoria=kategoria
df_optimal_cutof_within_epok <- rbind(x,df_optimal_cutof_within_epok)
}
}
df_optimal_cutof<- rbind(df_optimal_cutof_within_epok,df_optimal_cutof)
cut_off_final<- df_optimal_cutof  %>% select(cutoff,kategoria)
i=1
df_label_all<-data.frame()
df_label_within_epok<-data.frame()
for (i in seq(1,liczba_kategorii)){
sel = c(1:2,i+2,i+2+liczba_kategorii )
z<-df %>% select(all_of(sel))
kat=colnames(z)[3]
z$kategoria=kat
colnames(z)<-colnam
if(kat %in% unique(cut_off_final$kategoria)){
cut_off_val=cut_off_final %>% filter(kategoria ==kat) %>% pull(cutoff)
z <- z %>% mutate(label_predict=ifelse(p<cut_off_val,0,1))
df_label_within_epok<-rbind(z,df_label_within_epok)
}
}
df_label_all<- rbind(df_label_within_epok ,df_label_all)
df_label_all2<- df_label_all %>% mutate(label=ifelse(label==1,'TRUE','FALSE')) %>% filter(!is.na(label))
contingency <- df_label_all2 #%>% filter(nr_epoki==analizuje_epoke)
# Sensitivity: the ability of a test to correctly identify patients with a disease.
# Specificity: the ability of a test to correctly identify people without the disease.
#table(contingency$label,contingency$label_predict, contingency$kategoria)
cont_table<-contingency%>%
group_by(kategoria, label,label_predict)%>%
summarise(n=n()) %>%
#rbind()
tidyr::spread(label_predict, n)%>% data.frame() %>% replace(is.na(.),0)  %>% mutate(metryka=ifelse(label=='FALSE','swoistość','czułość'), #kiedy mierze sukces dla porazek to jest to swoistosc
value=ifelse(metryka=='swoistość',X0/(X0+X1),
ifelse(metryka=='czułość',X1/(X0+X1),NA)))
n_kat<- df %>% summarise_if(is.numeric,sum, na.rm=TRUE) %>% select(matches('_KATEGOR$')) %>% tidyr::pivot_longer(cols=everything()) %>% rename(kategoria=name,'n_maili'='value')
cont_table_wide <- cont_table %>%
tidyr::pivot_wider(id_cols = c(kategoria), names_from = metryka,values_from = value) %>%
data.frame() %>%  left_join(
#accuracy
df_label_all%>%  filter(!is.na(label)) %>%
group_by(kategoria) %>%
summarise(accuracy=sum(label==label_predict)/n())) %>% left_join(n_kat) %>%
mutate(status_kat=as.character(ifelse(n_maili<200,'1.zwiekszyc pule',
ifelse(accuracy<0.80 & n_maili<400,'2.slaby wynik, wybrac nowe,ODPOWIEDNIE maile',
ifelse(accuracy<0.7,'3.słaba ta kategoria, nie polepszymy od tak zwiększając pule',
'4.kategoria ok'))))) %>% data.frame() %>%
arrange(status_kat)
#cut_offy
df_optimal_cutof %>% filter(nr_epoki==analizuje_epoke) %>% select(cutoff,kategoria) %>% tidyr::pivot_wider(names_from = kategoria, values_from = cutoff) %>%
select(any_of(colnames(df))) %>% data.frame() %>% xlsx::write.xlsx(paste0('output/cutoff_',typ,'_model_version',model_version,'.xlsx'), row.names = FALSE)
View(cont_table_wide)
View(cont_table_wide)
cont_table_wide %>% arrange(accuracy) %>% filter(czułość >0) %>% head(10) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9))
cont_table_wide %>% arrange(accuracy) %>% filter(czułość >0) %>% head(10) %>% mutate(kategoria=factor(kategoria))
cont_table_wide %>% arrange(accuracy) %>% filter(czułość >0) %>% head(10) %>% mutate(kategoria=factor(kategoria)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9))
?factor
cont_table_wide %>% arrange(accuracy) %>% filter(czułość >0) %>% head(10) %>% mutate(kategoria=factor(kategoria,ordered=TRUE)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9))
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(10)
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(10) %>% mutate(kategoria=factor(kategoria,ordered=TRUE))
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(10) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9))
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(10) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = accuracy)) +
geom_col(position = position_dodge(0.9))
kategoria
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(10) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9))
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(10) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(10) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(10) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ggtitle("TOP 10 najlepiej wyuczonych przez model kategorii")
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(10) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ggtitle("NAJLEPSZE 10 wyuczonych przez model kategorii")
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(10) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ggtitle("NAJSŁABSZE 10 wyuczonych przez model kategorii")
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% tail(10) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ggtitle("NAJSŁABSZE 10 wyuczonych przez model kategorii")
cont_table_wide %>% arrange(desc(accuracy))  %>% tail(10) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ggtitle("NAJSŁABSZE 10 wyuczonych przez model kategorii")
View(cont_table_wide)
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(5) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ggtitle("NAJLEPSZE 10 wyuczonych przez model kategorii")
cont_table_wide %>% arrange(desc(accuracy))  %>% tail(5) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ggtitle("NAJSŁABSZE 10 wyuczonych przez model kategorii")
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(5) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ylim(0, 1)+
ggtitle("NAJLEPSZE 10 wyuczonych przez model kategorii")
cont_table_wide %>% arrange(desc(accuracy))  %>% tail(5) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ylim(0, 1)+
ggtitle("NAJSŁABSZE 10 wyuczonych przez model kategorii")
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(5) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ylim(0, 1)+
ggtitle("NAJLEPSZE 10 wyuczonych przez model kategorii")
cont_table_wide %>% arrange(desc(accuracy))  %>% tail(5) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ylim(0, 1)+
ggtitle("NAJSŁABSZE 10 wyuczonych przez model kategorii")
cont_table_wide %>% arrange(desc(accuracy)) %>% filter(czułość >0) %>% head(5) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ylim(0, 1)+
ggtitle("NAJLEPSZE 5 wyuczonych przez model kategorii")
cont_table_wide %>% arrange(desc(accuracy))  %>% tail(5) %>% mutate(kategoria=reorder(kategoria,-accuracy)) %>%
ggplot(aes(x = kategoria,y=accuracy, fill = kategoria)) +
geom_col(position = position_dodge(0.9)) +theme(
axis.text.x=element_blank())+
ylim(0, 1)+
ggtitle("NAJSŁABSZE 5 wyuczonych przez model kategorii")
View(cont_table_wide)
